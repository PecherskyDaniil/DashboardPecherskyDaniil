# -*- coding: utf-8 -*-
"""Visual.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14ME3Qs0vmcL7dmYcjIY2TMnUi-41c4Yp
"""

import re

from dash import Dash, html, dcc, callback, Output, Input
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd

df=pd.read_csv("stands.csv")
grads={"A":5,"B":4,"C":3,"D":2,"E":1,"∅":0,"?":None,"\xa0∅":0,'∞':5,"*":5,"C*":3,"B*":4,"D*":2,"A*":5}
gg="ABCDE∅"
def partfinder(s):
  if pd.isnull(s):
    return s
  elif "SO" in s.split(":")[0]:
    return 6
  elif "SC" in s.split(":")[0]:
    return 3
  elif "DU" in s.split(":")[0]:
    return 4
  elif "VA" in s.split(":")[0]:
    return 5
  elif "SBR" in s.split(":")[0]:
    return 7
  elif "JJL" in s.split(":")[0]:
    return 8
def chapterfinder(x):
  s=None
  if not(pd.isnull(x)):
    s=re.search(r'\d+',x)
  if s:
    return int(s.group(0))
  else:
    return None
df["Power"]=df["Power"].map(lambda x: grads[x] if not(pd.isnull(x)) else x)
df["Speed"]=df["Speed"].map(lambda x: grads[x] if not(pd.isnull(x)) else x)
df["Precision"]=df["Precision"].map(lambda x: grads[x] if not(pd.isnull(x)) else x)
df["Endurance"]=df["Endurance"].map(lambda x: grads[x] if not(pd.isnull(x)) else x)
df["Radius"]=df["Radius"].map(lambda x: grads[x] if not(pd.isnull(x)) else x)
df["Potential"]=df["Potential"].map(lambda x: grads[x] if not(pd.isnull(x)) else x)
df["Part"]=df["Manga"].map(lambda x: partfinder(x))
cols=['Power', 'Speed', 'Radius', 'Endurance',
       'Precision', 'Potential']
df["Chapter"]=df["Manga"].map(lambda x: chapterfinder(x))

data = df.set_index('Stand')[cols].transpose()

# external CSS stylesheets
external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = Dash(__name__,external_stylesheets=external_stylesheets,prevent_initial_callbacks='initial_duplicate')
colors = [
    "#bcb88a",
    "#ffb961",
    "#bdb76b",
    "#35170c",
    "#ff8b0f"
]
# df.groupby()

dff = data.columns[0]
fig = go.Figure()
fig.add_trace(go.Scatterpolar(r=data[dff], theta=cols, mode = 'lines',))
fig.add_trace(go.Scatterpolar(r=data[dff], theta=cols, mode = 'lines',))
stand1="Metallica"
stand2="Geb"
#fig.update_traces(fill='toself')
#fig.plot()
dsuns = dict(
    character=df["Stand"].tolist()+df["Part"].unique().tolist(),
    parent=df["Part"].tolist()+["" for i in range(df["Part"].unique().size)])
dsuns["value"]=[1 for i in range(len(dsuns["character"]))]
dsuns["color"]=[i%5 for i in range(len(dsuns["character"]))]
sunsb = px.sunburst(
    dsuns,
    names='character',
    parents='parent',
    values='value',
    #color="color",
    color_continuous_scale=colors
)
df["meanP"]=(df["Power"]+df["Endurance"]+df["Potential"]+df["Precision"]+df["Radius"]+df["Speed"])/6
bardf=df[df["Part"]==1]
bars=px.bar(bardf, y="Stand", x="meanP",orientation='h')
hist=px.histogram(df,x="Chapter")
# адаптивность диаграмм - встраивание в окно
style_dashboard={
          "height":'500px',
          "width":'100%',
          "display":"flex",
          "flex-direction":"column",
          "flex-grow":"0",
          "background-color":"#c3d4e0"
      }

app.layout = html.Div([
    html.H1(children='Jojo Stands', style={'textAlign':'center'}),
    html.Div([
    html.Div([
      html.H2(children='Best stands by season', style={'textAlign':'center'}),
      dcc.Dropdown(df.sort_values("Part")["Part"].unique(), 3, id='parameter',style={"height":"50px"}),
      #dcc.Dropdown(["Up","Down"], "Up", id='arrow',style={"height":"50px"}),
      dcc.Graph(id='bar-chart',figure = bars, style={"height":'1000px'}),
    ],style={"height":'100%',
          "width":'100%',"border":"1px solid blue",
          "border-radius":"10px"}),
    html.Div([
        html.H2(children='Stand Map', style={'textAlign':'center'}),
        dcc.Dropdown(df.sort_values("Stand")["Stand"].unique(), 'Metallica', id='dropdown-selection1',style={"height":"50px"}),
        dcc.Dropdown(df.sort_values("Stand")["Stand"].unique(), 'Geb', id='dropdown-selection2',style={"height":"50px"}),
        html.Div(id = 'text-output', style={"height":"50px"}),
        dcc.Graph(id='graph-content', figure = fig, style=style_dashboard),
        dcc.Graph(id='sun-chart',figure = sunsb, style=style_dashboard)],style={"height":'100%',"width":'100%',"border":"1px solid blue","border-radius":"10px"})
    ],style={"height":'100%',
          "width":'100%',
          "display":"flex",
          "flex-direction":"row",
          "flex-grow":"0",
          }),
    html.H2(children='First appearance histogram', style={'textAlign':'center'}),
    dcc.Slider(10, 200, 10,
               value=20,
               id='bins-slider'
    ),
    dcc.Graph(id='hist-chart',figure = hist)
])


@callback(
    Output('text-output', 'children'),
    Output('graph-content', 'figure'),
    Input('dropdown-selection1', 'value'),
    Input('dropdown-selection2', 'value')
)
def update_graph(value1,value2):
    global stand1
    global stand2
    stand1=value1
    stand2=value2
    ind1=df[df["Stand"]==value1].index.tolist()[0]
    dff1=data.columns[ind1]
    ind2=df[df["Stand"]==value2].index.tolist()[0]
    dff2=data.columns[ind2]
    fig = go.Figure()
    fig.add_trace(go.Scatterpolar(r=data[dff1], theta=cols,fill='toself', mode = 'lines',fillcolor="deepskyblue",opacity=0.5,name=stand1))
    fig.add_trace(go.Scatterpolar(r=data[dff2], theta=cols,fill='toself', mode = 'lines',fillcolor="peru",opacity=0.5,name=stand2))
    text="Stand User 1 - "+df[df["Stand"]==value1]["User"]+"\n"+"Stand User 2 - "+df[df["Stand"]==value2]["User"]
    return text,fig

@callback(
    Output('bar-chart', 'figure'),
    Input('parameter', 'value'),
    #Input('arrow', 'value')
)
def update_bar(value):
    #if va=="Up":
    #  bardf=df[df[vp]>4]
    #else:
    #  bardf=df[df[vp]<2]
    bardf=df[df["Part"]==value]
    bars=px.bar(bardf.sort_values("meanP"), y="Stand", x="meanP",orientation='h')
    return bars

@callback(
    Output('hist-chart', 'figure'),
    Input('bins-slider', 'value')
)
def update_hist(value):
    hist=px.histogram(df,x="Chapter",nbins=value)
    return hist

if __name__ == '__main__':
    app.run(debug=True)